// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid()) @db.Uuid
  email        String  @unique
  password     String
  name         String
  social_login Boolean
  verified     Boolean @default(false)
  createdAt    String  @map("created_at")
  updatedAt    String  @map("updated_at")

  accounts     Account[]
  transactions Transaction[]
  categories   Category[]

  @@map("users")
}

enum AccountType {
  CHECKING
  INVESTMENT
  CASH

  @@map("account_type")
}

model Account {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  name      String
  balance   Int
  color     String
  type      AccountType
  createdAt String      @map("created_at")
  updatedAt String      @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id           String          @id @default(uuid()) @db.Uuid
  userId       String          @map("user_id") @db.Uuid
  name         String
  type         TransactionType
  transactions Transaction[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("categories")
}

enum TransactionType {
  IN
  OUT

  @@map("transaction_type")
}

model Transaction {
  id              String          @id @default(uuid()) @db.Uuid
  userId          String          @map("user_id") @db.Uuid
  accountId       String          @map("account_id") @db.Uuid
  categoryId      String?         @map("category_id") @db.Uuid
  type            TransactionType
  description     String
  value           Int
  transactionDate DateTime        @map("transaction_date")
  createdAt       String          @map("created_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}
